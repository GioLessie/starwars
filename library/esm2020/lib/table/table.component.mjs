import { Component, EventEmitter, Input, Output } from '@angular/core';
import { isArray } from '../../utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/icon";
import * as i2 from "@angular/material/button";
import * as i3 from "@angular/material/table";
import * as i4 from "@angular/material/progress-spinner";
import * as i5 from "@angular/common";
import * as i6 from "../../utils/pipes/format-name.pipe";
import * as i7 from "../../utils/pipes/entity-array-mask.pipe";
export class TableComponent {
    constructor() {
        this.displayedColumns = [];
        this.dataSource = [];
        this.enableClickInRow = false;
        this.entityClickHandler = new EventEmitter();
        this.rowClickHandler = new EventEmitter();
    }
    isArray(item) {
        return isArray(item);
    }
    handleEntityClick(row, name) {
        if (this.enableClickInRow) {
            return;
        }
        this.entityClickHandler.emit({
            row: row,
            entityName: name,
        });
    }
    handleRowClick(row) {
        if (!this.enableClickInRow) {
            return;
        }
        this.rowClickHandler.emit({
            row: row,
        });
    }
}
TableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: TableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: TableComponent, selector: "lib-table", inputs: { displayedColumns: "displayedColumns", dataSource: "dataSource", enableClickInRow: "enableClickInRow" }, outputs: { entityClickHandler: "entityClickHandler", rowClickHandler: "rowClickHandler" }, ngImport: i0, template: "<!-- TABLE -->\r\n<div class=\"table\">\r\n  <div class=\"table__loader\" *ngIf=\"dataSource.length === 0\">\r\n    <mat-spinner [diameter]=\"60\"> </mat-spinner>\r\n  </div>\r\n  <table\r\n    mat-table\r\n    *ngIf=\"dataSource.length !== 0\"\r\n    [dataSource]=\"dataSource\"\r\n    class=\"mat-elevation-z8\"\r\n  >\r\n    <!-- Columns -->\r\n    <ng-container\r\n      *ngFor=\"let column of displayedColumns\"\r\n      [matColumnDef]=\"column\"\r\n    >\r\n      <!-- Column Header -->\r\n      <th mat-header-cell *matHeaderCellDef>\r\n        {{ column | formatName }}\r\n      </th>\r\n      <!-- Column Content -->\r\n      <td\r\n        mat-cell\r\n        *matCellDef=\"let element; let i = index\"\r\n        (click)=\"handleRowClick(element)\"\r\n        [ngClass]=\"{ clickable: enableClickInRow }\"\r\n      >\r\n        <button\r\n          mat-button\r\n          [disabled]=\"isArray(element[column])\"\r\n          (click)=\"handleEntityClick(element, column)\"\r\n        >\r\n          {{ element[column] | entityArrayMask }}\r\n          <mat-icon *ngIf=\"!isArray(element[column])\">open_in_new</mat-icon>\r\n        </button>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n  </table>\r\n</div>\r\n<!-- TABLE -->\r\n", styles: [".table{width:100%}.table__loader{margin:50px 0;display:flex;justify-content:center}.table .clickable{cursor:pointer}\n"], dependencies: [{ kind: "component", type: i1.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i2.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i3.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i3.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i3.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i3.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i3.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i3.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i3.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i3.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i3.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i3.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "component", type: i4.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "directive", type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i6.FormatNamePipe, name: "formatName" }, { kind: "pipe", type: i7.EntityArrayMaskPipe, name: "entityArrayMask" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: TableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-table', template: "<!-- TABLE -->\r\n<div class=\"table\">\r\n  <div class=\"table__loader\" *ngIf=\"dataSource.length === 0\">\r\n    <mat-spinner [diameter]=\"60\"> </mat-spinner>\r\n  </div>\r\n  <table\r\n    mat-table\r\n    *ngIf=\"dataSource.length !== 0\"\r\n    [dataSource]=\"dataSource\"\r\n    class=\"mat-elevation-z8\"\r\n  >\r\n    <!-- Columns -->\r\n    <ng-container\r\n      *ngFor=\"let column of displayedColumns\"\r\n      [matColumnDef]=\"column\"\r\n    >\r\n      <!-- Column Header -->\r\n      <th mat-header-cell *matHeaderCellDef>\r\n        {{ column | formatName }}\r\n      </th>\r\n      <!-- Column Content -->\r\n      <td\r\n        mat-cell\r\n        *matCellDef=\"let element; let i = index\"\r\n        (click)=\"handleRowClick(element)\"\r\n        [ngClass]=\"{ clickable: enableClickInRow }\"\r\n      >\r\n        <button\r\n          mat-button\r\n          [disabled]=\"isArray(element[column])\"\r\n          (click)=\"handleEntityClick(element, column)\"\r\n        >\r\n          {{ element[column] | entityArrayMask }}\r\n          <mat-icon *ngIf=\"!isArray(element[column])\">open_in_new</mat-icon>\r\n        </button>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n  </table>\r\n</div>\r\n<!-- TABLE -->\r\n", styles: [".table{width:100%}.table__loader{margin:50px 0;display:flex;justify-content:center}.table .clickable{cursor:pointer}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { displayedColumns: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], enableClickInRow: [{
                type: Input
            }], entityClickHandler: [{
                type: Output
            }], rowClickHandler: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS9zcmMvbGliL3RhYmxlL3RhYmxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvc3JjL2xpYi90YWJsZS90YWJsZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7Ozs7Ozs7OztBQU90QyxNQUFNLE9BQU8sY0FBYztJQU96QjtRQU5TLHFCQUFnQixHQUFhLEVBQUUsQ0FBQztRQUNoQyxlQUFVLEdBQVUsRUFBRSxDQUFDO1FBQ3ZCLHFCQUFnQixHQUFZLEtBQUssQ0FBQztRQUNqQyx1QkFBa0IsR0FBRyxJQUFJLFlBQVksRUFBZSxDQUFDO1FBQ3JELG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQVksQ0FBQztJQUUxQyxDQUFDO0lBRVQsT0FBTyxDQUFDLElBQVM7UUFDdEIsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLGlCQUFpQixDQUFDLEdBQVEsRUFBRSxJQUFZO1FBQzdDLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7WUFDM0IsR0FBRyxFQUFFLEdBQUc7WUFDUixVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sY0FBYyxDQUFDLEdBQVE7UUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUMxQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztZQUN4QixHQUFHLEVBQUUsR0FBRztTQUNULENBQUMsQ0FBQztJQUNMLENBQUM7OzJHQTlCVSxjQUFjOytGQUFkLGNBQWMsOFBDUjNCLDIyQ0EyQ0E7MkZEbkNhLGNBQWM7a0JBTDFCLFNBQVM7K0JBQ0UsV0FBVzswRUFLWixnQkFBZ0I7c0JBQXhCLEtBQUs7Z0JBQ0csVUFBVTtzQkFBbEIsS0FBSztnQkFDRyxnQkFBZ0I7c0JBQXhCLEtBQUs7Z0JBQ0ksa0JBQWtCO3NCQUEzQixNQUFNO2dCQUNHLGVBQWU7c0JBQXhCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBFbnRpdHlFdmVudCwgUm93RXZlbnQgfSBmcm9tICcuLi8uLi91dGlscy9tb2RlbC90YWJsZS5tb2RlbCc7XHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbGliLXRhYmxlJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vdGFibGUuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3RhYmxlLmNvbXBvbmVudC5zY3NzJ10sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUYWJsZUNvbXBvbmVudCB7XHJcbiAgQElucHV0KCkgZGlzcGxheWVkQ29sdW1uczogc3RyaW5nW10gPSBbXTtcclxuICBASW5wdXQoKSBkYXRhU291cmNlOiBhbnlbXSA9IFtdO1xyXG4gIEBJbnB1dCgpIGVuYWJsZUNsaWNrSW5Sb3c6IGJvb2xlYW4gPSBmYWxzZTtcclxuICBAT3V0cHV0KCkgZW50aXR5Q2xpY2tIYW5kbGVyID0gbmV3IEV2ZW50RW1pdHRlcjxFbnRpdHlFdmVudD4oKTtcclxuICBAT3V0cHV0KCkgcm93Q2xpY2tIYW5kbGVyID0gbmV3IEV2ZW50RW1pdHRlcjxSb3dFdmVudD4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBwdWJsaWMgaXNBcnJheShpdGVtOiBhbnkpIHtcclxuICAgIHJldHVybiBpc0FycmF5KGl0ZW0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGhhbmRsZUVudGl0eUNsaWNrKHJvdzogYW55LCBuYW1lOiBzdHJpbmcpIHtcclxuICAgIGlmICh0aGlzLmVuYWJsZUNsaWNrSW5Sb3cpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5lbnRpdHlDbGlja0hhbmRsZXIuZW1pdCh7XHJcbiAgICAgIHJvdzogcm93LFxyXG4gICAgICBlbnRpdHlOYW1lOiBuYW1lLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGFuZGxlUm93Q2xpY2socm93OiBhbnkpIHtcclxuICAgIGlmICghdGhpcy5lbmFibGVDbGlja0luUm93KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMucm93Q2xpY2tIYW5kbGVyLmVtaXQoe1xyXG4gICAgICByb3c6IHJvdyxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCI8IS0tIFRBQkxFIC0tPlxyXG48ZGl2IGNsYXNzPVwidGFibGVcIj5cclxuICA8ZGl2IGNsYXNzPVwidGFibGVfX2xvYWRlclwiICpuZ0lmPVwiZGF0YVNvdXJjZS5sZW5ndGggPT09IDBcIj5cclxuICAgIDxtYXQtc3Bpbm5lciBbZGlhbWV0ZXJdPVwiNjBcIj4gPC9tYXQtc3Bpbm5lcj5cclxuICA8L2Rpdj5cclxuICA8dGFibGVcclxuICAgIG1hdC10YWJsZVxyXG4gICAgKm5nSWY9XCJkYXRhU291cmNlLmxlbmd0aCAhPT0gMFwiXHJcbiAgICBbZGF0YVNvdXJjZV09XCJkYXRhU291cmNlXCJcclxuICAgIGNsYXNzPVwibWF0LWVsZXZhdGlvbi16OFwiXHJcbiAgPlxyXG4gICAgPCEtLSBDb2x1bW5zIC0tPlxyXG4gICAgPG5nLWNvbnRhaW5lclxyXG4gICAgICAqbmdGb3I9XCJsZXQgY29sdW1uIG9mIGRpc3BsYXllZENvbHVtbnNcIlxyXG4gICAgICBbbWF0Q29sdW1uRGVmXT1cImNvbHVtblwiXHJcbiAgICA+XHJcbiAgICAgIDwhLS0gQ29sdW1uIEhlYWRlciAtLT5cclxuICAgICAgPHRoIG1hdC1oZWFkZXItY2VsbCAqbWF0SGVhZGVyQ2VsbERlZj5cclxuICAgICAgICB7eyBjb2x1bW4gfCBmb3JtYXROYW1lIH19XHJcbiAgICAgIDwvdGg+XHJcbiAgICAgIDwhLS0gQ29sdW1uIENvbnRlbnQgLS0+XHJcbiAgICAgIDx0ZFxyXG4gICAgICAgIG1hdC1jZWxsXHJcbiAgICAgICAgKm1hdENlbGxEZWY9XCJsZXQgZWxlbWVudDsgbGV0IGkgPSBpbmRleFwiXHJcbiAgICAgICAgKGNsaWNrKT1cImhhbmRsZVJvd0NsaWNrKGVsZW1lbnQpXCJcclxuICAgICAgICBbbmdDbGFzc109XCJ7IGNsaWNrYWJsZTogZW5hYmxlQ2xpY2tJblJvdyB9XCJcclxuICAgICAgPlxyXG4gICAgICAgIDxidXR0b25cclxuICAgICAgICAgIG1hdC1idXR0b25cclxuICAgICAgICAgIFtkaXNhYmxlZF09XCJpc0FycmF5KGVsZW1lbnRbY29sdW1uXSlcIlxyXG4gICAgICAgICAgKGNsaWNrKT1cImhhbmRsZUVudGl0eUNsaWNrKGVsZW1lbnQsIGNvbHVtbilcIlxyXG4gICAgICAgID5cclxuICAgICAgICAgIHt7IGVsZW1lbnRbY29sdW1uXSB8IGVudGl0eUFycmF5TWFzayB9fVxyXG4gICAgICAgICAgPG1hdC1pY29uICpuZ0lmPVwiIWlzQXJyYXkoZWxlbWVudFtjb2x1bW5dKVwiPm9wZW5faW5fbmV3PC9tYXQtaWNvbj5cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgPC90ZD5cclxuICAgIDwvbmctY29udGFpbmVyPlxyXG5cclxuICAgIDx0ciBtYXQtaGVhZGVyLXJvdyAqbWF0SGVhZGVyUm93RGVmPVwiZGlzcGxheWVkQ29sdW1uc1wiPjwvdHI+XHJcbiAgICA8dHIgbWF0LXJvdyAqbWF0Um93RGVmPVwibGV0IHJvdzsgY29sdW1uczogZGlzcGxheWVkQ29sdW1uc1wiPjwvdHI+XHJcbiAgPC90YWJsZT5cclxuPC9kaXY+XHJcbjwhLS0gVEFCTEUgLS0+XHJcbiJdfQ==